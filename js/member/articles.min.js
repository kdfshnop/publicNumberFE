'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 1. 项目名称：有房有客微信CDN框架
 2. 页面名称：article.js (文章列表页)
 3. 作者：douyadong@lifang.com
 -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
var articleController = function (_Controller) {
    _inherits(articleController, _Controller);

    function articleController() {
        _classCallCheck(this, articleController);

        var _this = _possibleConstructorReturn(this, (articleController.__proto__ || Object.getPrototypeOf(articleController)).call(this));

        _this.pullload();
        _this.tips();
        return _this;
    }
    // 上拉加载


    _createClass(articleController, [{
        key: 'pullload',
        value: function pullload() {
            var agentId = $.cookie('agentId') || '';
            var openId = $.cookie('openId');
            var env = $.cookie('env') || 'dev';
            var yfykLink = ""; //文章预览页跳转至yfyk2h5_fe;
            switch (env) {
                case "dev":
                    yfykLink = "http://localhost:8080";
                    break;
                case "test":
                    yfykLink = "//m.test.wkzf";
                    break;
                case "sim":
                    yfykLink = "//m.sim.wkzf";
                    break;
                case "prod":
                    yfykLink = "https://m.wkzf.com";
                    break;
            };
            var self = this;
            require(["../components/async-item.min"], function (AsyncItem) {
                self.AsyncItem = new AsyncItem({ controller: self });
            });
            $("#list").pullload({
                apiUrl: this.apiUrl.member.articleList,
                contentType: "application/json",
                requestType: "post",
                queryStringObject: {
                    "conditionList": [{
                        "fieldName": "openId",
                        "symbol": "eq",
                        "value": openId
                    }]
                },
                traditional: true,
                pageSize: 10,
                threshold: 50,
                callback: function callback(data) {
                    var str = '';
                    if (data.data.data) {
                        $.each(data.data.data, function (index, item) {
                            item.yfykLink = yfykLink;
                            item.agentId = agentId;
                            // 处理日期格式化;
                            var date = new Date(item.showTime); //根据返回时间戳获取时间,日期;
                            var td = new Date(); //获取当前时间的时间戳;
                            var year = date.getFullYear();
                            var tYear = td.getFullYear();
                            var month = date.getMonth() + 1;
                            var tMonth = td.getMonth() + 1;
                            var strDate = date.getDate();
                            var tStrDate = td.getDate();
                            var hours = date.getHours();
                            var minutes = date.getMinutes();
                            if (month >= 1 && month <= 9) {
                                month = "0" + month;
                            };
                            if (strDate >= 0 && strDate <= 9) {
                                strDate = "0" + strDate;
                            };
                            if (tMonth >= 1 && tMonth <= 9) {
                                tMonth = "0" + tMonth;
                            };
                            if (tStrDate >= 0 && tStrDate <= 9) {
                                tStrDate = "0" + tStrDate;
                            };
                            if (minutes >= 0 && minutes <= 9) {
                                minutes = "0" + minutes;
                            };
                            var currentTime = void 0;
                            if (year == tYear && month == tMonth && strDate == tStrDate) {
                                currentTime = hours + ":" + minutes;
                            } else if (year == tYear) {
                                currentTime = month + '-' + strDate + ' ' + hours + ":" + minutes;
                            } else {
                                currentTime = year + '-' + month + '-' + strDate + ' ' + hours + ":" + minutes;
                            }
                            item.currentTime = currentTime;
                            str += self.AsyncItem.article(item);
                        });
                    }
                    $("#list").append(str);
                }
            });
        }
        // 文章采集提示框是否显示;

    }, {
        key: 'tips',
        value: function tips() {
            var tips = window.localStorage.getItem('tips') || false; //智能采集文章提示框;
            if (tips) {
                $('.tool').addClass('none');
            };
            $('.addArticle').click(function () {
                tips = window.localStorage.setItem('tips', 'true');
            });
        }
    }]);

    return articleController;
}(Controller);

;
/*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
类的初始化
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
$(document).ready(function () {
    new articleController();
});
//# sourceMappingURL=articles.min.js.map
